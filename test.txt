    Updating crates.io index
   Compiling sp-std v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling sc-consensus-slots v0.10.0-dev (/Users/shayaunnejad/Blockchain/substrate/node-copy/client/consensus/slots)
   Compiling sp-panic-handler v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling sc-network v0.10.0-dev (/Users/shayaunnejad/Blockchain/substrate/node-copy/client/network)
   Compiling node-runtime v3.0.0-dev (/Users/shayaunnejad/Blockchain/substrate/node-copy/bin/node/runtime)
   Compiling substrate-test-runtime v2.0.0 (/Users/shayaunnejad/Blockchain/substrate/node-copy/test-utils/runtime)
   Compiling sp-runtime-interface-test-wasm v2.0.0 (/Users/shayaunnejad/Blockchain/substrate/node-copy/primitives/runtime-interface/test-wasm)
   Compiling sp-runtime-interface-test-wasm-deprecated v2.0.0 (/Users/shayaunnejad/Blockchain/substrate/node-copy/primitives/runtime-interface/test-wasm-deprecated)
   Compiling sc-runtime-test v2.0.0 (/Users/shayaunnejad/Blockchain/substrate/node-copy/client/executor/runtime-test)
   Compiling sp-version v4.0.0-dev (/Users/shayaunnejad/Blockchain/substrate/node-copy/primitives/version)
   Compiling frame-support v4.0.0-dev (/Users/shayaunnejad/Blockchain/substrate/node-copy/frame/support)
   Compiling sp-core-hashing v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling sp-storage v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling sp-wasm-interface v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling sp-tracing v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling sp-arithmetic v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling sp-core-hashing-proc-macro v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling sp-externalities v0.10.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling sp-api v4.0.0-dev (/Users/shayaunnejad/Blockchain/substrate/node-copy/primitives/api)
   Compiling sp-consensus v0.10.0-dev (/Users/shayaunnejad/Blockchain/substrate/node-copy/primitives/consensus/common)
   Compiling remote-externalities v0.10.0-dev (/Users/shayaunnejad/Blockchain/substrate/node-copy/utils/frame/remote-externalities)
   Compiling sp-runtime-interface v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
   Compiling frame-support v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
error[E0277]: the trait bound `Block: sp_runtime::traits::Block` is not satisfied
   --> primitives/consensus/common/src/lib.rs:297:9
    |
297 | impl<T: sp_version::GetRuntimeVersionAt<Block> + sp_version::GetNativeVersion, Block: BlockT>
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `sp_runtime::traits::Block` is not implemented for `Block`
    |
note: required by a bound in `GetRuntimeVersionAt`
   --> /Users/shayaunnejad/Blockchain/substrate/node-copy/primitives/version/src/lib.rs:266:38
    |
266 | pub trait GetRuntimeVersionAt<Block: BlockT> {
    |                                      ^^^^^^ required by this bound in `GetRuntimeVersionAt`
help: consider further restricting this bound
    |
297 | impl<T: sp_version::GetRuntimeVersionAt<Block> + sp_version::GetNativeVersion, Block: BlockT + sp_runtime::traits::Block>
    |                                                                                              +++++++++++++++++++++++++++

For more information about this error, try `rustc --explain E0277`.
   Compiling sc-executor v0.10.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
error[E0308]: mismatched types
   --> primitives/api/src/lib.rs:670:15
    |
670 |             spec_name: x.spec_name,
    |                        ^^^^^^^^^^^ expected enum `sp_runtime::runtime_string::RuntimeString`, found enum `RuntimeString`
    |
    = note: perhaps two different versions of crate `sp_runtime` are being used?

   Compiling sp-core v4.0.0-dev (https://github.com/paritytech/substrate.git?branch=master#20b54920)
error[E0308]: mismatched types
   --> primitives/api/src/lib.rs:671:15
    |
671 |             impl_name: x.impl_name,
    |                        ^^^^^^^^^^^ expected enum `sp_runtime::runtime_string::RuntimeString`, found enum `RuntimeString`
    |
    = note: perhaps two different versions of crate `sp_runtime` are being used?

error[E0308]: mismatched types
   --> primitives/api/src/lib.rs:684:15
    |
684 |             spec_name: x.spec_name,
    |                        ^^^^^^^^^^^ expected enum `RuntimeString`, found enum `sp_runtime::runtime_string::RuntimeString`
    |
    = note: perhaps two different versions of crate `sp_runtime` are being used?

error[E0308]: mismatched types
   --> primitives/api/src/lib.rs:685:15
    |
685 |             impl_name: x.impl_name,
    |                        ^^^^^^^^^^^ expected enum `RuntimeString`, found enum `sp_runtime::runtime_string::RuntimeString`
    |
    = note: perhaps two different versions of crate `sp_runtime` are being used?

For more information about this error, try `rustc --explain E0308`.
error: could not compile `sp-consensus` due to previous error
warning: build failed, waiting for other jobs to finish...
error[E0599]: the method `saturating_add` exists for associated type `<Self as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungible/balanced.rs:173:20
    |
173 |             amount = amount.saturating_add(new_balance);
    |                             ^^^^^^^^^^^^^^ method cannot be called on `<Self as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_add` exists for associated type `<Self as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungible/balanced.rs:196:20
    |
196 |             amount = amount.saturating_add(new_balance);
    |                             ^^^^^^^^^^^^^^ method cannot be called on `<Self as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_add` exists for associated type `<Self as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungible/balanced.rs:244:37
    |
244 |         let mut new_balance = old_balance.saturating_add(amount);
    |                                           ^^^^^^^^^^^^^^ method cannot be called on `<Self as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_add` exists for associated type `<U as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungible/balanced.rs:265:45
    |
265 |         U::set_total_issuance(U::total_issuance().saturating_add(amount))
    |                                                   ^^^^^^^^^^^^^^ method cannot be called on `<U as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_sub` exists for associated type `<U as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungible/balanced.rs:276:45
    |
276 |         U::set_total_issuance(U::total_issuance().saturating_sub(amount))
    |                                                   ^^^^^^^^^^^^^^ method cannot be called on `<U as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_sub` exists for associated type `<U as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungible/balanced.rs:317:17
    |
317 |         let new = old.saturating_sub(amount);
    |                       ^^^^^^^^^^^^^^ method cannot be called on `<U as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_add` exists for associated type `<U as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungible/balanced.rs:323:17
    |
323 |         let new = old.saturating_add(amount);
    |                       ^^^^^^^^^^^^^^ method cannot be called on `<U as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_sub` exists for associated type `<U as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungible/balanced.rs:336:28
    |
336 |         (credit(slashed), amount.saturating_sub(slashed))
    |                                  ^^^^^^^^^^^^^^ method cannot be called on `<U as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <U as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_add` exists for associated type `<Self as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
  --> frame/support/src/traits/tokens/fungible.rs:89:35
   |
89 |         Self::can_deposit(&dest, amount.saturating_add(extra)).into_result()?;
   |                                         ^^^^^^^^^^^^^^ method cannot be called on `<Self as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
   |
   = note: the following trait bounds were not satisfied:
           `<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
           which is required by `<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
   = help: items from traits can only be used if the trait is in scope
   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
           `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_add` exists for associated type `<Self as tokens::fungible::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
  --> frame/support/src/traits/tokens/fungible.rs:92:21
   |
92 |             actual == amount.saturating_add(extra),
   |                              ^^^^^^^^^^^^^^ method cannot be called on `<Self as tokens::fungible::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
   |
   = note: the following trait bounds were not satisfied:
           `<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
           which is required by `<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
           which is required by `&<Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: std::clone::Clone`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: One`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: CheckedMul`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: Bounded`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
           `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
           which is required by `&mut <Self as tokens::fungible::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
   = help: items from traits can only be used if the trait is in scope
   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
           `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_add` exists for associated type `<Self as tokens::fungibles::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungibles.rs:140:42
    |
140 |         Self::can_deposit(asset, &dest, amount.saturating_add(extra)).into_result()?;
    |                                                ^^^^^^^^^^^^^^ method cannot be called on `<Self as tokens::fungibles::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<Self as tokens::fungibles::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: One`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0599]: the method `saturating_add` exists for associated type `<Self as tokens::fungibles::Inspect<AccountId>>::Balance`, but its trait bounds were not satisfied
   --> frame/support/src/traits/tokens/fungibles.rs:143:21
    |
143 |             actual == amount.saturating_add(extra),
    |                              ^^^^^^^^^^^^^^ method cannot be called on `<Self as tokens::fungibles::Inspect<AccountId>>::Balance` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `<Self as tokens::fungibles::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: One`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&<Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: std::clone::Clone`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Zero`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: One`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: CheckedMul`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: Bounded`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
            `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: num_traits::ops::saturating::Saturating`
            which is required by `&mut <Self as tokens::fungibles::Inspect<AccountId>>::Balance: sp_runtime::traits::Saturating`
    = help: items from traits can only be used if the trait is in scope
    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:
            `use sp_arithmetic::traits::Saturating;`

error[E0308]: mismatched types
   --> frame/support/src/traits/hooks.rs:311:62
    |
311 |         sp_state_machine::BasicExternalities::execute_with_storage(storage, || {
    |                                                                    ^^^^^^^ expected struct `sp_core::sp_storage::Storage`, found struct `sp_runtime::Storage`
    |
    = note: expected mutable reference `&mut sp_core::sp_storage::Storage`
               found mutable reference `&mut sp_runtime::Storage`
    = note: perhaps two different versions of crate `sp_storage` are being used?

warning: unused import: `sp_runtime::traits::Saturating`
  --> frame/support/src/traits/tokens/fungible.rs:28:5
   |
28 | use sp_runtime::traits::Saturating;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `sp_runtime::traits::Saturating`
  --> frame/support/src/traits/tokens/fungibles.rs:25:5
   |
25 | use sp_runtime::traits::Saturating;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0308, E0599.
For more information about an error, try `rustc --explain E0308`.
warning: `frame-support` (lib) generated 2 warnings
error: build failed
